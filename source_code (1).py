# -*- coding: utf-8 -*-
"""output(google colab).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tSOUX8Eqiv8FIZbFEYYAW3xa3ja2x_mY

# **1.Setup**
"""

!pip install pandas numpy matplotlib seaborn wordcloud scikit-learn nltk snscrape

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
from wordcloud import WordCloud
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
nltk.download('stopwords')
from nltk.corpus import stopwords

"""# **2.Load Dataset**"""

from google.colab import drive
import pandas as pd

file_path = '/content/drive/MyDrive/NMDS/emotion_dataset.csv'
df = pd.read_csv(file_path)
print(df.head())

"""# 3.Clean the **Text**"""

def clean_text(text):
  text = text.lower()
  text = re.sub(r'http\S+','',text)    #remove URLs
  text = re.sub(r'@\w+','',text)       #remove mentions
  text = re.sub(r'#\w+','',text)       #remove hashtags
  text = re.sub(r'[^a-z\s]', '', text)    # remove punctuation and numbers
  words = text.split()
  words = [word for word in words if word not in stopwords.words('english')]
  return ' '.join(words)

  df['clean_text'] = df['text'].apply(clean_text)
  df.head()

"""# **4.Exploratory Data Analysis(EDA)**"""

# After loading your dataset
df = pd.read_csv(file_path)

# Clean the column names
df.columns = df.columns.str.strip()
df.columns = df.columns.str.lower()

# Split the single column into two columns
df[['clean_text', 'emotion']] = df[df.columns[0]].str.split(';', expand=True)

# Check if splitting worked
print(df.head())

# Now you can plot without issues
plt.figure(figsize=(10,5))
sns.countplot(x='emotion', data=df)
plt.title('Emotion Distribution')
plt.xticks(rotation=45)
plt.show()

# Generate wordcloud
text = ' '.join(df['clean_text'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.xticks(rotation=45)
plt.axis('off')
plt.show()

"""# **5.Feature Engineering(TF-IDF)**"""

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['clean_text'])
y = df['emotion']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# **6.Model Building**"""

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

"""# **7.Model Evaluation**"""

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification classification_report:\n",classification_report(y_test, y_pred))

conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.title('Confusion Matrix')
plt.show()

"""#**8.Save Your Model and Vectorizer**"""

pip install gradio

"""# **9.Create the app.py(streamlit code)**"""

import gradio as gr
import joblib

# Load model and vectorizer
model = joblib.load("/content/sample_data/emotion_model.pkl")
vectorizer = joblib.load("/content/sample_data/vectorizer.pkl")

# Prediction function
def predict_emotion(text):
    if not text.strip():
        return "Please enter some text."
    transformed = vectorizer.transform([text])
    prediction = model.predict(transformed)
    return prediction[0]

# Sample examples
examples = [
    "I just got a promotion at work today — I’m so happy and excited!",
    "I miss my old life. Everything feels so empty now.",
    "I can't believe they treated me like that. Totally unacceptable!",
    "I'm really scared about tomorrow's results.",
    "Just opened my email and saw a job offer from my dream company!",
    "I’m so lucky to have someone who supports me no matter what."
]

# Gradio UI with custom styles
with gr.Blocks(css="""
    .input-textbox textarea {background-color: #f0f8ff !important; color: #000;}
    .emotion-output textarea {background-color: #fff3cd !important; color: #333; font-weight: bold;}
    .submit-button button {
        background-color: #ff9800 !important;
        color: white !important;
        font-weight: bold;
        border-radius: 8px;
        padding: 10px 20px;
    }
""") as demo:

    gr.Markdown(
        """
        # Decoding Emotions from Social Media Conversations
        *Enter a post or comment and discover the emotion behind it!*
        """
    )

    with gr.Row():
        input_text = gr.Textbox(
            lines=3,
            label="Your Text",
            placeholder="Type or paste a social media post here...",
            elem_classes=["input-textbox"]
        )

    output_label = gr.Textbox(
        label="Predicted Emotion",
        interactive=False,
        elem_classes=["emotion-output"]
    )

    submit_btn = gr.Button("Predict Emotion", elem_classes=["submit-button"])
    submit_btn.click(fn=predict_emotion, inputs=input_text, outputs=output_label)

    gr.Examples(examples=examples, inputs=input_text)

    gr.Markdown("---")
    gr.Markdown("Created by HKTeam | Powered by Gradio")

# Launch
demo.launch()